---
title: "Class 06: R Functions"
author: "Jesus (A17597539)"
format: pdf
---
#All about functions in R

Functions are the way we get stuff done in R. WE call function to read data, compute stuff, plot stuff, etc.

R makes writing funcntions accessible but we should always start by trying to get a working snippet of code first before we write our function

##Todays Lab

We will grade a whole class of student assignments. We will try to start with a simplified version of the problem

```{r}
#Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

If we want the average we can use the `mean()` function:
```{r}
mean(student1)
```

Let's be nice instructors and drop the lowest score so the answer here should be 100.

I can use the `min()` functions to find the lowest value

```{r}
min(student1)
```

I found the `which.min()` function that may be useful here. How does it work? Let's try it:
```{r}
student1
which.min(student1)
```

I can use the minus syntax trick to get everything but the element with the min value.
```{r}
student1[-which.min(student1)]
```

I have my first working snipet :)
```{r}
mean(student1[-which.min(student1)])
```


Let's test on the other students

```{r}
student2
mean(student2[-which.min(student2)])
```

Where is the problem - The NA result
We use `na.rm=TRUE` 
```{r}
min(student2)

mean(student2, na.rm=TRUE)
```

```{r}
mean(student3, na.rm=TRUE)
```

No bueno. We need to fix this

I want to stop working with `student1`, `student2` etc. and typing it out every time so let instead work with an input `x`
```{r}
x <- student2
x
```

We want to overwrite the NA values with zero- if you miss a homework you score a zero on this homework.

Google and Claude told me about the `is.na` function. Let's see how it works
```{r}
x
is.na(x)
```

```{r}
x[is.na(x)]
```

```{r}
x[is.na(x)] <- 0

x
```

```{r}
x <- student1
x
mean(x[-which.min(x)])
```
This is my working snippet of code that solves the problem for all my example student inputs :)
```{r}
x <- student3
#Masks NA values to zero
x[is.na(x)] <- 0
#Drop lowest score and get the mean
mean( x[-which.min(x)] )
```


```{r}
grade <- function(x){
  #Masks NA values to zero
  x[is.na(x)] <- 0
  #Drop lowest score and get the mean
  mean( x[-which.min(x)] )
}
```

Use this Function:
```{r}
grade(student1)
grade(student2)
grade(student3)

```

We need to read the gradebook
```{r}
gradebook <-read.csv("https://tinyurl.com/gradeinput", row.names=1)
gradebook
```

I can use `apply()` function if I figure out how to use the damn thing...

Q1
```{r}
ans <- apply(gradebook, 1, grade)
ans
```

Q2
The highest scoring student in the overall gradebook is student 18
```{r}
which.max(ans)
```


Q3

Homework 2 was the toughest on the students
```{r}
Hw<- apply(gradebook, 2, grade)

which.min(Hw)
```



